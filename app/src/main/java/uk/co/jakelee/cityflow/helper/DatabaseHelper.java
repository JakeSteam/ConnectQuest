package uk.co.jakelee.cityflow.helper;

import java.util.ArrayList;
import java.util.List;

import uk.co.jakelee.cityflow.main.MainActivity;
import uk.co.jakelee.cityflow.model.Achievement;
import uk.co.jakelee.cityflow.model.Boost;
import uk.co.jakelee.cityflow.model.Pack;
import uk.co.jakelee.cityflow.model.Puzzle;
import uk.co.jakelee.cityflow.model.PuzzleCustom;
import uk.co.jakelee.cityflow.model.Setting;
import uk.co.jakelee.cityflow.model.Statistic;
import uk.co.jakelee.cityflow.model.Text;
import uk.co.jakelee.cityflow.model.Tile;
import uk.co.jakelee.cityflow.model.TileType;

public class DatabaseHelper {
    public final static int NO_DATABASE = 0;
    public final static int V1_0_0 = 1;

    public static void handlePatches() {
        if (MainActivity.prefs.getInt("databaseVersion", DatabaseHelper.NO_DATABASE) <= DatabaseHelper.NO_DATABASE) {
            DatabaseHelper.initialSetup();
            MainActivity.prefs.edit().putInt("databaseVersion", DatabaseHelper.V1_0_0).apply();
        }
    }

    private static void initialSetup() {
        createAchievement();
        createBoost();
        createPack();
        createPuzzle();
        createSetting();
        createStatistic();
        createText();
        createTile();
        createTileType();
    }

    private static void createAchievement() {
        List<Achievement> achievements = new ArrayList<>();
            achievements.add(new Achievement("Get It Turning", "Rotate 100 tiles", 100, Constants.STATISTIC_TILES_ROTATED, "CgkIgrzuo64REAIQAw"));
        Achievement.saveInTx(achievements);
    }

    private static void createBoost() {
        List<Boost> boosts = new ArrayList<>();
            boosts.add(new Boost(Constants.BOOST_UNDO, 1, 10, 0));
            boosts.add(new Boost(Constants.BOOST_TIME, 1, 5, 0));
            boosts.add(new Boost(Constants.BOOST_MOVE, 1, 5, 0));
            boosts.add(new Boost(Constants.BOOST_SHUFFLE, 1, 20, 0));
        Boost.saveInTx(boosts);
    }

    private static void createText() {
        List<Text> texts = new ArrayList<>();
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "ALERT_SETTING_TOGGLE_ON", "Toggled %1$s on!"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "ALERT_SETTING_TOGGLE_OFF", "Toggled %1$s off!"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_1_NAME", "Undo"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_1_DESC", "Undo your 1 most recent move, also decreasing the move count."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_1_UPGRADE", "Upgrading Undo increases the number of undoes that can be performed per puzzle by 1 per level."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_2_NAME", "Time Reduction"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_2_DESC", "Reduce the recorded time for the level by 10%."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_2_UPGRADE", "Upgrading Time Reduction reduces the puzzle time taken by 10% per level."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_3_NAME", "Move Reduction"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_3_DESC", "Reduce the recorded moves per level by 1."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_3_UPGRADE", "Upgrading Move Reduction reduces the puzzle moves taken by 1 per level."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_4_NAME", "Shuffle Board"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_4_DESC", "Randomly all rotate all tiles on the board 1 time."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "BOOST_4_UPGRADE", "Upgrading Shuffle Board increases the number of times the board can be shuffled by 1 per level."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "DIALOG_CHANGE_TEXT", "Change %1$s text"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "DIALOG_CHANGE_SLIDER", "Change %1$s value"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "DIALOG_BUTTON_CHANGE", "Change"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "DIALOG_BUTTON_CONFIRM", "Confirm"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "DIALOG_BUTTON_CANCEL", "Cancel"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "DIALOG_SUPPORT_CODE", "Support Code"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "ENVIRONMENT_0_NAME", "None"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "ENVIRONMENT_1_NAME", "Grass"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "ENVIRONMENT_2_NAME", "City"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "ERROR_FAILED_TO_CONNECT", "Couldn't log in. Please try again later."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "ERROR_SUPPORT_CODE_INVALID", "Failed to apply support code! Please contact support."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "FLOW_0_NAME", "None"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "FLOW_1_NAME", "Water"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "FLOW_2_NAME", "Road"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "FLOW_3_NAME", "Path"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "FLOW_4_NAME", "Grass"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "FLOW_5_NAME", "Canal"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PACK_1_NAME", "Tutorial"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PACK_1_DESC", "Let's go with the flow."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PACK_2_NAME", "The Big City"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PACK_2_DESC", "Get flowing in the big city."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PACK_3_NAME", "Escape To The Country"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PACK_3_DESC", "Flow all the way out to the country."));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_1_NAME", "No Crossing"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_2_NAME", "Don't Cross The Flows"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_11_NAME", "One Shop Town"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_12_NAME", "Beware The Moat"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_13_NAME", "Pop To The Shops"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_14_NAME", "Transition The Flows"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_15_NAME", "Height Matters!"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_16_NAME", "Make Your Own Solution"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_17_NAME", "Gridlock"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_18_NAME", "Tree Lined Swimway"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_19_NAME", "Competitive Business"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_20_NAME", "The Long Way Round"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_21_NAME", "It Never Ends"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_22_NAME", "Round And Round"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_23_NAME", "The High Road"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_24_NAME", "Better Go Slow!"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_25_NAME", "Coming Up For Air"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_26_NAME", "Gone Fishing"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_27_NAME", "Keep Going Left"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_28_NAME", "Don't Miss The Turning"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_29_NAME", "End Of The Line"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_30_NAME", "A Summer Walk"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_41_NAME", "Highs And Lows"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "PUZZLE_END_TEXT", "It flows!\n\n%1$d stars\nTime: %2$s\nMoves: %3$d\n\nTarget Time: %4$s\nTarget Moves: %5$d\n\nBest Time: %6$s%7$s\nBest Moves: %8$d%9$s\nNew Tiles: %10$d%11$s"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "SETTING_1_NAME", "Music"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "SETTING_2_NAME", "Sounds"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "SETTING_3_NAME", "Minimum Zoom"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "SETTING_4_NAME", "Maximum Zoom"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "SETTING_5_NAME", "Zen Mode"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "SETTING_6_NAME", "Hide Unstocked Boosts"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "SETTING_7_NAME", "Player Name"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "STATISTIC_1_NAME", "Puzzles Completed"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "STATISTIC_2_NAME", "Tiles Rotated"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "SUCCESS_SUPPORT_CODE", "Successfully applied support code!"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_0_NAME", "Invisible Tile"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_1_NAME", "Grass Road Corner"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_2_NAME", "Grass Road Straight"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_3_NAME", "Grass Road End"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_4_NAME", "Grass Road Interchange"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_5_NAME", "Grass Road T Junction"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_6_NAME", "Grass"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_7_NAME", "Grass Road Bridge"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_8_NAME", "Grass Water Corner"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_9_NAME", "Grass Water Straight"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_10_NAME", "Grass Road Straight (Median)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_11_NAME", "Grass Road Slope"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_12_NAME", "Grass Slope"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_13_NAME", "City Red Shop"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_14_NAME", "City Road Straight (Bus Stop)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_15_NAME", "City Road Straight"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_16_NAME", "City Road Interchange"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_17_NAME", "City Road T Junction"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_18_NAME", "City Road End"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_19_NAME", "City Road Corner"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_20_NAME", "City Road Slope"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_21_NAME", "City"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_22_NAME", "City Path Straight"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_23_NAME", "City Path Corner"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_24_NAME", "City Path End"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_25_NAME", "City Road/Path T Junction"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_26_NAME", "City Grass End"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_27_NAME", "City Grass Straight (Tree)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_28_NAME", "City Grass Straight"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_29_NAME", "City Road Straight (Crossing)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_30_NAME", "City Green Shop"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_31_NAME", "City (Fountain)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_32_NAME", "City (Grass)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_33_NAME", "Grass Road/Water Straight"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_34_NAME", "Grass High"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_35_NAME", "Grass Water End"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_36_NAME", "Grass High Road End"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_37_NAME", "Grass High Road Straight"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_38_NAME", "City Road End (Underground)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_39_NAME", "Grass High Road Corner"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_40_NAME", "City Canal Straight"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_41_NAME", "City Canal End"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_42_NAME", "Grass Road Corner (Sharp)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_43_NAME", "Grass (Tree 1)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_44_NAME", "Grass (Tree 2)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_45_NAME", "Grass (Tree 3)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_46_NAME", "City Road/Path Corner"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_47_NAME", "City High Road Straight"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_48_NAME", "City High Road Corner"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_49_NAME", "City Grass Corner"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_50_NAME", "City Canal Corner"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "TILE_51_NAME", "City Road/Path Corner (Inverse)"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "WORD_NAME", "Name"));
            texts.add(new Text(Constants.LANGUAGE_EN_GB, "WORD_DESCRIPTION", "Description"));
        Text.saveInTx(texts);
    }

    private static void createPack() {
        List<Pack> packs = new ArrayList<>();
            packs.add(new Pack(1, "IAP code", "CgkIgrzuo64REAIQEA", "CgkIgrzuo64REAIQEQ", 6));
            packs.add(new Pack(2, "IAP code", "CgkIgrzuo64REAIQEw", "CgkIgrzuo64REAIQFA", 30));
            packs.add(new Pack(3, "IAP code", "CgkIgrzuo64REAIQFQ", "CgkIgrzuo64REAIQFg", 30));
        Pack.saveInTx(packs);
    }

    private static void createPuzzle() {
        List<Puzzle> puzzles = new ArrayList<>();
            puzzles.add(new Puzzle(1, 1, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(2, 1, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(11, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(12, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(13, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(14, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(15, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(16, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(17, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(18, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(19, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(20, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(21, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(22, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(23, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(24, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(25, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(26, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(27, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(28, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(29, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(30, 2, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(41, 3, 10000L, 20, 0L, 0));

            puzzles.add(new Puzzle(98, 0, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(99, 0, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(100, 0, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(101, 0, 10000L, 20, 0L, 0));
            puzzles.add(new Puzzle(102, 0, 10000L, 20, 0L, 0));
        Puzzle.saveInTx(puzzles);

        List<PuzzleCustom> puzzleCustoms = new ArrayList<>();
            puzzleCustoms.add(new PuzzleCustom(98, System.currentTimeMillis(), "Block test", "Test puzzle desc", "Someone", true));
            puzzleCustoms.add(new PuzzleCustom(99, System.currentTimeMillis(), "Logo", "Test puzzle desc 2", "Someone 2", true));
            puzzleCustoms.add(new PuzzleCustom(100, System.currentTimeMillis(), "A square, but this is a test of long names", "Test puzzle desc 3", "Someone 3", false));
            puzzleCustoms.add(new PuzzleCustom(101, System.currentTimeMillis(), "A line", "Test puzzle desc 4", "Someone 4", false));
            puzzleCustoms.add(new PuzzleCustom(102, System.currentTimeMillis(), "Empty test", "Test puzzle desc 4", "Someone 4", true));
        PuzzleCustom.saveInTx(puzzleCustoms);
    }

    private static void createSetting() {
        List<Setting> settings = new ArrayList<>();
            settings.add(new Setting(Constants.SETTING_MUSIC, true));
            settings.add(new Setting(Constants.SETTING_SOUNDS, true));
            settings.add(new Setting(Constants.SETTING_MIN_ZOOM, 0.50f, 0.1f, 1.0f));
            settings.add(new Setting(Constants.SETTING_MAX_ZOOM, 1.75f, 1.0f, 3.0f));
            settings.add(new Setting(Constants.SETTING_ZEN_MODE, false));
            settings.add(new Setting(Constants.SETTING_HIDE_UNSTOCKED_BOOSTS, false));
            settings.add(new Setting(Constants.SETTING_PLAYER_NAME, "New Player"));
            settings.add(new Setting(Constants.SETTING_SIGN_IN, true));
        Setting.saveInTx(settings);
    }

    private static void createStatistic() {
        List<Statistic> statistics = new ArrayList<>();
            statistics.add(new Statistic(Constants.STATISTIC_PUZZLES_COMPLETED, Statistic.Fields.PuzzlesCompleted, 0));
            statistics.add(new Statistic(Constants.STATISTIC_TILES_ROTATED, Statistic.Fields.TilesRotated, 0, 0));
            statistics.add(new Statistic(Constants.STATISTIC_QUESTS_COMPLETED, Statistic.Fields.QuestsCompleted, 0));
        Statistic.saveInTx(statistics);
    }

    private static void createTile() {
        List<Tile> tiles = new ArrayList<>();
            tiles.add(new Tile(1, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(1, 18, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(1, 18, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(1, 13, 1, 1, Constants.ROTATION_NORTH));

            tiles.add(new Tile(2, 41, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(2, 41, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(2, 26, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(2, 26, 1, 1, Constants.ROTATION_NORTH));

            tiles.add(new Tile(11, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(11, 19, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(11, 21, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(11, 14, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(11, 29, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(11, 13, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(11, 19, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(11, 19, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(11, 21, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(12, 50, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(12, 40, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(12, 50, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(12, 40, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(12, 31, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(12, 40, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(12, 50, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(12, 40, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(12, 50, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(13, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(13, 29, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(13, 19, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(13, 15, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(13, 30, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(13, 15, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(13, 38, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(13, 13, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(13, 38, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(14, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(14, 14, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(14, 19, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(14, 29, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(14, 46, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(14, 46, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(14, 18, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(14, 18, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(14, 30, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(15, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(15, 20, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(15, 48, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(15, 20, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(15, 48, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(15, 48, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(15, 48, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(15, 48, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(15, 21, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(16, 41, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(16, 41, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(16, 41, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(16, 41, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(16, 31, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(16, 41, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(16, 41, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(16, 41, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(16, 41, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(17, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(17, 17, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(17, 19, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(17, 17, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(17, 16, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(17, 17, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(17, 19, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(17, 17, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(17, 19, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(18, 26, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(18, 41, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(18, 26, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(18, 27, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(18, 40, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(18, 27, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(18, 26, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(18, 41, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(18, 26, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(19, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(19, 18, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(19, 13, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(19, 17, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(19, 14, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(19, 18, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(19, 19, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(19, 18, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(19, 13, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(20, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(20, 20, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(20, 48, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(20, 25, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(20, 24, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(20, 47, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(20, 19, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(20, 20, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(20, 48, 2, 2, Constants.ROTATION_NORTH));

            tiles.add(new Tile(21, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 19, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 24, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 23, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 19, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 16, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 19, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 24, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 38, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 19, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 16, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 19, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 19, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 38, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 19, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(21, 19, 3, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(22, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 19, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 19, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 19, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 15, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 25, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 25, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 15, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 29, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 25, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 25, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 29, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 19, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 17, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 17, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(22, 19, 3, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(23, 48, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 47, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 47, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 48, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 47, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 31, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 31, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 47, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 47, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 31, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 31, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 47, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 48, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 47, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 47, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(23, 48, 3, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(24, 26, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 27, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 28, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 26, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 18, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 25, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 20, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 48, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 18, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 25, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 20, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 48, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 24, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 22, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 24, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(24, 30, 3, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(25, 38, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 38, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 38, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 38, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 29, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 15, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 15, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 15, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 15, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 17, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 16, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 17, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 38, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 38, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 38, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(25, 38, 3, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(26, 18, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 25, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 25, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 18, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 23, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 23, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 22, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 24, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 23, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 24, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 22, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 22, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 41, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 41, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 23, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(26, 23, 3, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(27, 49, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 27, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 27, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 49, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 28, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 49, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 49, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 28, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 28, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 26, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 28, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 27, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 49, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 27, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 49, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(27, 26, 3, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(28, 32, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 38, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 20, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 48, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 41, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 40, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 41, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 47, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 38, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 20, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 47, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 48, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 26, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 27, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 26, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(28, 31, 3, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(29, 18, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 14, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 17, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 29, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 19, 0, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 13, 0, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 23, 0, 6, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 23, 0, 7, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 30, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 18, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 19, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 31, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 19, 1, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 29, 1, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 25, 1, 6, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 25, 1, 7, Constants.ROTATION_NORTH));
            tiles.add(new Tile(29, 38, 1, 8, Constants.ROTATION_NORTH));

            tiles.add(new Tile(30, 18, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 25, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 29, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 46, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 23, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 23, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 46, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 23, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 22, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 30, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 25, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 23, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 23, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 23, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 38, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 22, 3, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 21, 4, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 23, 4, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 22, 4, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(30, 23, 4, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(41, 19, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 25, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 20, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 48, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 38, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 22, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 13, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 47, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 38, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 22, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 30, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 20, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 19, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 25, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 29, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(41, 19, 3, 3, Constants.ROTATION_NORTH));

            // All possible tiles
            tiles.add(new Tile(98, 1, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 2, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 3, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 4, 0, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 5, 0, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 6, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 7, 1, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 8, 1, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 9, 1, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 10, 1, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 11, 2, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 12, 2, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 13, 2, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 14, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 15, 2, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 16, 3, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 17, 3, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 18, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 19, 3, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 20, 3, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 21, 4, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 22, 4, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 23, 4, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 24, 4, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 25, 4, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 26, 5, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 27, 5, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 28, 5, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 29, 5, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 30, 5, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 31, 5, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 32, 6, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 33, 6, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 34, 6, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 35, 6, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 36, 6, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 37, 6, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 38, 7, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 39, 7, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 40, 7, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 41, 7, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 42, 7, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 43, 7, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 44, 8, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 45, 8, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 46, 8, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 47, 8, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(98, 48, 8, 4, Constants.ROTATION_NORTH));

            // City flow logo
            tiles.add(new Tile(99, 21, 0, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 1, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 31, 1, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 1, 6, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 2, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 2, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 2, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 30, 2, 6, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 21, 2, 7, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 19, 3, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 29, 3, 3, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 14, 3, 4, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 17, 3, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 19, 3, 6, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 18, 3, 7, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 3, 8, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 4, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 29, 4, 2, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 21, 4, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 26, 4, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 14, 4, 5, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 19, 4, 6, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 17, 4, 7, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 13, 4, 8, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 4, 9, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 5, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 5, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 19, 5, 2, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 18, 5, 3, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 26, 5, 4, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 18, 5, 5, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 19, 5, 6, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 19, 5, 7, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 21, 5, 8, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 5, 9, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 21, 5, 10, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 6, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 6, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 6, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 1, 6, 4, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 3, 6, 5, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 2, 6, 6, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 1, 6, 7, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 1, 6, 8, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 3, 6, 9, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 3, 6, 10, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 3, 6, 11, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 7, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 7, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 5, 7, 4, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 33, 7, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 7, 7, 6, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 7, 7, 7, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 7, 7, 8, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 7, 7, 9, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 7, 7, 10, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 7, 7, 11, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 8, 7, 12, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 6, 8, 3, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 33, 8, 4, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 6, 8, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 3, 8, 6, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 1, 8, 7, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 1, 8, 8, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 1, 8, 9, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 5, 8, 10, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 1, 8, 11, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 9, 8, 12, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 6, 8, 13, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 8, 9, 4, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 9, 9, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 9, 9, 6, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 8, 9, 7, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 12, 9, 8, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 12, 9, 9, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 8, 9, 10, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 9, 9, 11, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 8, 9, 12, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 6, 10, 5, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 10, 6, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 8, 10, 7, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 8, 10, 8, Constants.ROTATION_EAST));
            tiles.add(new Tile(99, 8, 10, 9, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 8, 10, 10, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 6, 10, 11, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 11, 6, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 11, 7, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 8, 11, 8, Constants.ROTATION_WEST));
            tiles.add(new Tile(99, 8, 11, 9, Constants.ROTATION_SOUTH));
            tiles.add(new Tile(99, 6, 11, 10, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 12, 7, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 12, 8, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 12, 9, Constants.ROTATION_NORTH));
            tiles.add(new Tile(99, 6, 13, 8, Constants.ROTATION_NORTH));

            tiles.add(new Tile(100, 1, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(100, 1, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(100, 1, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(100, 1, 1, 1, Constants.ROTATION_NORTH));

            tiles.add(new Tile(101, 18, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(101, 15, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(101, 15, 0, 2, Constants.ROTATION_NORTH));
            tiles.add(new Tile(101, 18, 0, 3, Constants.ROTATION_NORTH));

            tiles.add(new Tile(102, 0, 0, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(102, 3, 0, 1, Constants.ROTATION_NORTH));
            tiles.add(new Tile(102, 3, 1, 0, Constants.ROTATION_NORTH));
            tiles.add(new Tile(102, 0, 1, 1, Constants.ROTATION_NORTH));

            Tile.saveInTx(tiles);
    }

    private static void createTileType() {
        List<TileType> tileTypes = new ArrayList<>();
            tileTypes.add(new TileType(0, Constants.ENVIRONMENT_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 0));
            tileTypes.add(new TileType(1, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 1));
            tileTypes.add(new TileType(2, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 2));
            tileTypes.add(new TileType(3, Constants.ENVIRONMENT_GRASS, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(4, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.HEIGHT_NORMAL, 4));
            tileTypes.add(new TileType(5, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.FLOW_ROAD, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 5));
            tileTypes.add(new TileType(6, Constants.ENVIRONMENT_GRASS, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 6));
            tileTypes.add(new TileType(7, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.FLOW_WATER, Constants.FLOW_ROAD, Constants.FLOW_WATER, Constants.HEIGHT_NORMAL, 7));
            tileTypes.add(new TileType(8, Constants.ENVIRONMENT_GRASS, Constants.FLOW_WATER, Constants.FLOW_WATER, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 8));
            tileTypes.add(new TileType(9, Constants.ENVIRONMENT_GRASS, Constants.FLOW_WATER, Constants.FLOW_NONE, Constants.FLOW_WATER, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 9));
            tileTypes.add(new TileType(10, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 10));
            tileTypes.add(new TileType(11, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_HIGH, Constants.HEIGHT_NORMAL, Constants.HEIGHT_NORMAL, Constants.HEIGHT_NORMAL, 11));
            tileTypes.add(new TileType(12, Constants.ENVIRONMENT_GRASS, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_HIGH, Constants.HEIGHT_NORMAL, Constants.HEIGHT_NORMAL, Constants.HEIGHT_NORMAL, 12));
            tileTypes.add(new TileType(13, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 13));
            tileTypes.add(new TileType(14, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 14));
            tileTypes.add(new TileType(15, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 15));
            tileTypes.add(new TileType(16, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.HEIGHT_NORMAL, 16));
            tileTypes.add(new TileType(17, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.FLOW_ROAD, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 17));
            tileTypes.add(new TileType(18, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 18));
            tileTypes.add(new TileType(19, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 19));
            tileTypes.add(new TileType(20, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_HIGH, Constants.HEIGHT_NORMAL, Constants.HEIGHT_NORMAL, Constants.HEIGHT_NORMAL, 20));
            tileTypes.add(new TileType(21, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(22, Constants.ENVIRONMENT_CITY, Constants.FLOW_PATH, Constants.FLOW_NONE, Constants.FLOW_PATH, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(23, Constants.ENVIRONMENT_CITY, Constants.FLOW_PATH, Constants.FLOW_PATH, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(24, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.FLOW_PATH, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(25, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.FLOW_PATH, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(26, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.FLOW_GRASS, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(27, Constants.ENVIRONMENT_CITY, Constants.FLOW_GRASS, Constants.FLOW_NONE, Constants.FLOW_GRASS, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(28, Constants.ENVIRONMENT_CITY, Constants.FLOW_GRASS, Constants.FLOW_NONE, Constants.FLOW_GRASS, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(29, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(30, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(31, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(32, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(33, Constants.ENVIRONMENT_GRASS, Constants.FLOW_WATER, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(34, Constants.ENVIRONMENT_GRASS, Constants.FLOW_NONE, Constants.HEIGHT_HIGH, 3));
            tileTypes.add(new TileType(35, Constants.ENVIRONMENT_GRASS, Constants.FLOW_NONE, Constants.FLOW_WATER, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(36, Constants.ENVIRONMENT_GRASS, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_HIGH, 3));
            tileTypes.add(new TileType(37, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_HIGH, 3));
            tileTypes.add(new TileType(38, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, Constants.HEIGHT_NORMAL, Constants.HEIGHT_NORMAL, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(39, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_HIGH, 3));
            tileTypes.add(new TileType(40, Constants.ENVIRONMENT_CITY, Constants.FLOW_CANAL, Constants.FLOW_NONE, Constants.FLOW_CANAL, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(41, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.FLOW_CANAL, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(42, Constants.ENVIRONMENT_GRASS, Constants.FLOW_ROAD, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(43, Constants.ENVIRONMENT_GRASS, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(44, Constants.ENVIRONMENT_GRASS, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(45, Constants.ENVIRONMENT_GRASS, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(46, Constants.ENVIRONMENT_CITY, Constants.FLOW_PATH, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(47, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.HEIGHT_HIGH, 3));
            tileTypes.add(new TileType(48, Constants.ENVIRONMENT_CITY, Constants.FLOW_ROAD, Constants.FLOW_ROAD, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_HIGH, 3));
            tileTypes.add(new TileType(49, Constants.ENVIRONMENT_CITY, Constants.FLOW_GRASS, Constants.FLOW_GRASS, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(50, Constants.ENVIRONMENT_CITY, Constants.FLOW_CANAL, Constants.FLOW_CANAL, Constants.FLOW_NONE, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
            tileTypes.add(new TileType(51, Constants.ENVIRONMENT_CITY, Constants.FLOW_NONE, Constants.FLOW_ROAD, Constants.FLOW_PATH, Constants.FLOW_NONE, Constants.HEIGHT_NORMAL, 3));
        TileType.saveInTx(tileTypes);
    }
}
